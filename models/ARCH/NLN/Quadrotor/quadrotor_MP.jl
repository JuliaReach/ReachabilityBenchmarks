# =================================================================
# Quadrotor model
# See https://easychair.org/publications/paper/gjfh
# =================================================================

using MathematicalSystems, LazySets
DynamicPolynomials, SemialgebraicSets
using Reachability: Options

# ==============================
# Load model
# ==============================

"""
    quadrotor(; [T], [X0], [variables], [controller_inputs])

Construct the Quadrotor model.

### Input

- `T`                 -- (optional, default: `5.0`) time horizon
- `X0`                -- (optional, default: position is uncertain in all directions
                          within `[-0.4, 0.4]m` and velocity is uncertain in all directions
                          within `[-0.4, 0.4]m/s`) set of initial states
- `variables`         -- (optional, default: `PolyVar` variables) the set of polynomal
                          variables that are used in the equations
- `controller_inputs` -- (optional, default: `(1.0, 0.0, 0.0)`) tuple with
                         the controller inputs `u‚ÇÅ`, `u‚ÇÇ` and `u‚ÇÉ` which
                         correspond to the desired values for height, roll and
                         pitch respectively

### Output

The tuple `(ùëÉ, ùëÇ)` where `ùëÉ` is an initial-value problem and `ùëÇ` are the options.

### Notes

 Physical variables:
 
-  x‚ÇÅ : interitial (north) position
-  x‚ÇÇ : intertial (east) position
-  x‚ÇÉ : altitude
-  x‚ÇÑ : longitudinal velocity
-  x‚ÇÖ : lateral velocity
-  x‚ÇÜ : vertical velocity
-  x‚Çá : roll angle
-  x‚Çà : pitch angle
-  x‚Çâ : yaw angle
-  x‚ÇÅ‚ÇÄ : roll rate
-  x‚ÇÅ‚ÇÅ : pitch rate
-  x‚ÇÅ‚ÇÇ : yaw rate

### Specification

The task is to change the height from `0[m]` to `1[m]` within `5[s]`. A goal region
`[0.98, 1.02]` of the height `x‚ÇÉ` has to be reached within `5[s]` and the height
has to stay below 1.4 for all times. After `1[s]` the height should stay above
`0.9[m]`.
"""
function quadrotor(; T=5.0,
                   X0=Hyperrectangle(zeros(12), [fill(0.4, 6); fill(0.0, 6)]),
                   variables=(@polyvar x[1:12]),
                   controller_inputs=(1.0, 0.0, 0.0))

    # parameters of the model
    g = 9.81           # gravity constant in m/s^2
    R = 0.1            # radius of center mass in m
    l = 0.5            # distance of motors to center mass in m
    Mrotor = 0.1       # motor mass in kg
    M = 1.0             # center mass in kg
    m = M + 4 * Mrotor   # total mass in kg

    # moments of inertia
    Jx = 2 / 5 * M * R^2 + 2 * l^2 * Mrotor
    Jy = Jx
    Jz = 2 / 5 * M * R^2 + 4 * l^2 * Mrotor

    ùëÇ = Options()

    # unrwap the variables and the inputs
    x‚ÇÅ, x‚ÇÇ, x‚ÇÉ, x‚ÇÑ, x‚ÇÖ, x‚ÇÜ, x‚Çá, x‚Çà, x‚Çâ, x‚ÇÅ‚ÇÄ, x‚ÇÅ‚ÇÅ, x‚ÇÅ‚ÇÇ = variables[1] # or variables
    u‚ÇÅ, u‚ÇÇ, u‚ÇÉ = controller_inputs

    ùëÇ[:variables] = variables
    ùëÇ[:vars] = [1:12;]

    # equations of the controllers
    F = m * g - 10 * (x‚ÇÉ - u‚ÇÅ) + 3 * x‚ÇÜ  # height control
    œÑœï = -(x‚Çá - u‚ÇÇ) - x‚ÇÅ‚ÇÄ            # roll control
    œÑŒ∏ = -(x‚Çà - u‚ÇÉ) - x‚ÇÅ‚ÇÅ          # pitch control
    œÑœà = 0                         # heading is uncontrolled

    # differential equations for the quadrotor
    ·∫ã‚ÇÅ = cos(x‚Çà) * cos(x‚Çâ) * x‚ÇÑ + (sin(x‚Çá) * sin(x‚Çà) * cos(x‚Çâ) - cos(x‚Çá) * sin(x‚Çâ)) * x‚ÇÖ +
         (cos(x‚Çá) * sin(x‚Çà) * cos(x‚Çâ) + sin(x‚Çá) * sin(x‚Çâ)) * x‚ÇÜ
    ·∫ã‚ÇÇ = cos(x‚Çà) * sin(x‚Çâ) * x‚ÇÑ + (sin(x‚Çá) * sin(x‚Çà) * sin(x‚Çâ) + cos(x‚Çá) * cos(x‚Çâ)) * x‚ÇÖ +
         (cos(x‚Çá) * sin(x‚Çà) * sin(x‚Çâ) - sin(x‚Çá) * cos(x‚Çâ)) * x‚ÇÜ
    ·∫ã‚ÇÉ = sin(x‚Çà) * x‚ÇÑ - sin(x‚Çá) * cos(x‚Çà) * x‚ÇÖ - cos(x‚Çá) * cos(x‚Çà) * x‚ÇÜ
    ·∫ã‚ÇÑ = x‚ÇÅ‚ÇÇ * x‚ÇÖ - x‚ÇÅ‚ÇÅ * x‚ÇÜ - g * sin(x‚Çà)
    ·∫ã‚ÇÖ = x‚ÇÅ‚ÇÄ * x‚ÇÜ - x‚ÇÅ‚ÇÇ * x‚ÇÑ + g * cos(x‚Çà) * sin(x‚Çá)
    ·∫ã‚ÇÜ = x‚ÇÅ‚ÇÅ * x‚ÇÑ - x‚ÇÅ‚ÇÄ * x‚ÇÖ + g * cos(x‚Çà) * cos(x‚Çá) - F / m
    ·∫ã‚Çá = x‚ÇÅ‚ÇÄ + sin(x‚Çá) * tan(x‚Çà) * x‚ÇÅ‚ÇÅ + cos(x‚Çá) * tan(x‚Çà) * x‚ÇÅ‚ÇÇ
    ·∫ã‚Çà = cos(x‚Çá) * x‚ÇÅ‚ÇÅ - sin(x‚Çá) * x‚ÇÅ‚ÇÇ
    ·∫ã‚Çâ = (sin(x‚Çá) / cos(x‚Çà)) * x‚ÇÅ‚ÇÅ + (cos(x‚Çá) / cos(x‚Çà)) * x‚ÇÅ‚ÇÇ
    ·∫ã‚ÇÅ‚ÇÄ = (Jy - Jz) / Jx * x‚ÇÅ‚ÇÅ * x‚ÇÅ‚ÇÇ + œÑœï / Jx
    ·∫ã‚ÇÅ‚ÇÅ = (Jz - Jx) / Jy * x‚ÇÅ‚ÇÄ * x‚ÇÅ‚ÇÇ + œÑŒ∏ / Jy
    ·∫ã‚ÇÅ‚ÇÇ = (Jx - Jy) / Jz * x‚ÇÅ‚ÇÄ * x‚ÇÅ‚ÇÅ + œÑœà / Jz

    ùêπ = PolynomialContinuousSystem(f)

    # instantiate the IVP
    ùëÉ = InitialValueProblem(ùêπ, X0)

    # time horizon
    ùëÇ[:T] = T

    # variables to plot
    ùëÇ[:plot_vars] = [0, 3]

    # safety property
    # TODO: add specification
    #ùëÇ[:property] = LinearConstraintProperty([0, 0, 0, -1., 0, 0, 0], -unsafe_bound)
    # @set x‚ÇÑ ‚â• 0.01, vars=(x‚ÇÅ, x‚ÇÇ, x‚ÇÉ, x‚ÇÑ, x‚ÇÖ, x‚ÇÜ, x‚Çá)
    return (ùëÉ, ùëÇ)
end
